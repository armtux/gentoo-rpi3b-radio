diff -urN old/include/sway/server.h new/include/sway/server.h
--- old/include/sway/server.h	2018-05-24 00:33:57.668093267 -0000
+++ new/include/sway/server.h	2018-05-24 01:02:24.758124854 -0000
@@ -11,7 +11,9 @@
 #include <wlr/types/wlr_xdg_shell.h>
 #include <wlr/render/wlr_renderer.h>
 // TODO WLR: make Xwayland optional
+#ifdef HAVE_XWAYLAND
 #include <wlr/xwayland.h>
+#endif
 
 struct sway_server {
 	struct wl_display *wl_display;
@@ -37,9 +39,13 @@
 	struct wlr_xdg_shell *xdg_shell;
 	struct wl_listener xdg_shell_surface;
 
+#ifdef HAVE_XWAYLAND
 	struct wlr_xwayland *xwayland;
+#endif
 	struct wlr_xcursor_manager *xcursor_manager;
+#ifdef HAVE_XWAYLAND
 	struct wl_listener xwayland_surface;
+#endif
 
 	struct wlr_wl_shell *wl_shell;
 	struct wl_listener wl_shell_surface;
@@ -56,6 +62,8 @@
 void handle_layer_shell_surface(struct wl_listener *listener, void *data);
 void handle_xdg_shell_v6_surface(struct wl_listener *listener, void *data);
 void handle_xdg_shell_surface(struct wl_listener *listener, void *data);
+#ifdef HAVE_XWAYLAND
 void handle_xwayland_surface(struct wl_listener *listener, void *data);
+#endif
 
 #endif
diff -urN old/include/sway/tree/layout.h new/include/sway/tree/layout.h
--- old/include/sway/tree/layout.h	2018-05-24 00:33:57.668093267 -0000
+++ new/include/sway/tree/layout.h	2018-05-24 01:01:36.568123963 -0000
@@ -27,7 +27,9 @@
 
 	struct wl_listener output_layout_change;
 
+#ifdef HAVE_XWAYLAND
 	struct wl_list xwayland_unmanaged; // sway_xwayland_unmanaged::link
+#endif
 
 	struct wlr_texture *debug_tree;
 
diff -urN old/include/sway/tree/view.h new/include/sway/tree/view.h
--- old/include/sway/tree/view.h	2018-05-24 00:33:57.668093267 -0000
+++ new/include/sway/tree/view.h	2018-05-24 01:01:14.118123547 -0000
@@ -3,7 +3,9 @@
 #include <wayland-server.h>
 #include <wlr/types/wlr_surface.h>
 #include <wlr/types/wlr_xdg_shell_v6.h>
+#ifdef HAVE_XWAYLAND
 #include <wlr/xwayland.h>
+#endif
 #include "sway/input/input-manager.h"
 #include "sway/input/seat.h"
 
@@ -71,7 +73,9 @@
 	union {
 		struct wlr_xdg_surface_v6 *wlr_xdg_surface_v6;
 		struct wlr_xdg_surface *wlr_xdg_surface;
+#ifdef HAVE_XWAYLAND
 		struct wlr_xwayland_surface *wlr_xwayland_surface;
+#endif
 		struct wlr_wl_shell_surface *wlr_wl_shell_surface;
 	};
 
@@ -115,6 +119,7 @@
 	int pending_width, pending_height;
 };
 
+#ifdef HAVE_XWAYLAND
 struct sway_xwayland_view {
 	struct sway_view view;
 
@@ -147,6 +152,7 @@
 	struct wl_listener unmap;
 	struct wl_listener destroy;
 };
+#endif
 
 struct sway_view_child;
 
diff -urN old/meson.build new/meson.build
--- old/meson.build	2018-05-24 00:33:57.668093267 -0000
+++ new/meson.build	2018-05-24 00:40:10.768100171 -0000
@@ -47,6 +47,10 @@
 
 conf_data = configuration_data()
 
+if get_option('enable-xwayland')
+	conf_data.set('HAVE_XWAYLAND', true)
+endif
+
 if gdk_pixbuf.found()
 	conf_data.set('HAVE_GDK_PIXBUF', true)
 endif
diff -urN old/meson_options.txt new/meson_options.txt
--- old/meson_options.txt	2018-05-24 00:33:57.668093267 -0000
+++ new/meson_options.txt	2018-05-24 01:06:03.528128902 -0000
@@ -1,3 +1,4 @@
 option('sway_version', type : 'string', description: 'The version string reported in `sway --version`.')
 option('default_wallpaper', type: 'boolean', value: true, description: 'Install the default wallpaper.')
 option('zsh_completions', type: 'boolean', value: true, description: 'Install zsh shell completions.')
+option('enable-xwayland', type: 'boolean', value: true, description: 'Enable support X11 applications')
diff -urN old/sway/desktop/output.c new/sway/desktop/output.c
--- old/sway/desktop/output.c	2018-05-24 00:33:57.668093267 -0000
+++ new/sway/desktop/output.c	2018-05-24 00:59:40.338121812 -0000
@@ -138,6 +138,7 @@
 	}
 }
 
+#ifdef HAVE_XWAYLAND
 static void unmanaged_for_each_surface(struct wl_list *unmanaged,
 		struct sway_output *output, struct root_geometry *geo,
 		wlr_surface_iterator_func_t iterator, void *user_data) {
@@ -152,6 +153,7 @@
 			iterator, user_data);
 	}
 }
+#endif
 
 static void scale_box(struct wlr_box *box, float scale) {
 	box->x *= scale;
@@ -258,6 +260,7 @@
 		render_surface_iterator, &data);
 }
 
+#ifdef HAVE_XWAYLAND
 static void render_unmanaged(struct sway_output *output,
 		pixman_region32_t *damage, struct wl_list *unmanaged) {
 	struct render_data data = {
@@ -268,6 +271,7 @@
 	unmanaged_for_each_surface(unmanaged, output, &data.root_geo,
 		render_surface_iterator, &data);
 }
+#endif
 
 static void render_rect(struct wlr_output *wlr_output,
 		pixman_region32_t *output_damage, const struct wlr_box *_box,
@@ -812,10 +816,12 @@
 		render_view_surfaces(
 				workspace->sway_workspace->fullscreen, output, damage);
 
+#ifdef HAVE_XWAYLAND
 		if (workspace->sway_workspace->fullscreen->type == SWAY_VIEW_XWAYLAND) {
 			render_unmanaged(output, damage,
 				&root_container.sway_root->xwayland_unmanaged);
 		}
+#endif
 	} else {
 		float clear_color[] = {0.25f, 0.25f, 0.25f, 1.0f};
 
@@ -835,8 +841,10 @@
 		struct sway_container *focus = seat_get_focus(seat);
 		render_container(output, damage, workspace, focus == workspace);
 
+#ifdef HAVE_XWAYLAND
 		render_unmanaged(output, damage,
 			&root_container.sway_root->xwayland_unmanaged);
+#endif
 		render_layer(output, damage,
 			&output->layers[ZWLR_LAYER_SHELL_V1_LAYER_TOP]);
 	}
@@ -880,11 +888,13 @@
 		send_frame_done_iterator, data);
 }
 
+#ifdef HAVE_XWAYLAND
 static void send_frame_done_unmanaged(struct send_frame_done_data *data,
 		struct wl_list *unmanaged) {
 	unmanaged_for_each_surface(unmanaged, data->output, &data->root_geo,
 		send_frame_done_iterator, data);
 }
+#endif
 
 static void send_frame_done_container_iterator(struct sway_container *con,
 		void *_data) {
@@ -916,8 +926,10 @@
 	struct sway_container *workspace = output_get_active_workspace(output);
 	send_frame_done_container(&data, workspace);
 
+#ifdef HAVE_XWAYLAND
 	send_frame_done_unmanaged(&data,
 		&root_container.sway_root->xwayland_unmanaged);
+#endif
 
 	send_frame_done_layer(&data,
 		&output->layers[ZWLR_LAYER_SHELL_V1_LAYER_TOP]);
diff -urN old/sway/desktop/xwayland.c new/sway/desktop/xwayland.c
--- old/sway/desktop/xwayland.c	2018-05-24 00:33:57.668093267 -0000
+++ new/sway/desktop/xwayland.c	2018-05-24 00:42:43.608102999 -0000
@@ -1,4 +1,5 @@
 #define _POSIX_C_SOURCE 199309L
+#ifdef HAVE_XWAYLAND
 #include <stdbool.h>
 #include <stdlib.h>
 #include <wayland-server.h>
@@ -388,3 +389,4 @@
 	wl_signal_add(&xsurface->events.map, &xwayland_view->map);
 	xwayland_view->map.notify = handle_map;
 }
+#endif
diff -urN old/sway/input/cursor.c new/sway/input/cursor.c
--- old/sway/input/cursor.c	2018-05-24 00:33:57.668093267 -0000
+++ new/sway/input/cursor.c	2018-05-24 00:55:13.548116875 -0000
@@ -49,6 +49,7 @@
 		struct sway_seat *seat, double x, double y,
 		struct wlr_surface **surface, double *sx, double *sy) {
 	// check for unmanaged views first
+#ifdef HAVE_XWAYLAND
 	struct wl_list *unmanaged = &root_container.sway_root->xwayland_unmanaged;
 	struct sway_xwayland_unmanaged *unmanaged_surface;
 	wl_list_for_each_reverse(unmanaged_surface, unmanaged, link) {
@@ -64,7 +65,7 @@
 			return NULL;
 		}
 	}
-
+#endif
 	// find the output the cursor is on
 	struct wlr_output_layout *output_layout =
 		root_container.sway_root->output_layout;
diff -urN old/sway/input/seat.c new/sway/input/seat.c
--- old/sway/input/seat.c	2018-05-24 00:33:57.668093267 -0000
+++ new/sway/input/seat.c	2018-05-24 00:53:48.828115308 -0000
@@ -95,10 +95,12 @@
 
 	if (con->type == C_VIEW
 			&& seat_is_input_allowed(seat, con->sway_view->surface)) {
+#ifdef HAVE_XWAYLAND
 		if (con->sway_view->type == SWAY_VIEW_XWAYLAND) {
 			struct wlr_xwayland *xwayland = seat->input->server->xwayland;
 			wlr_xwayland_set_seat(xwayland, seat->wlr_seat);
 		}
+#endif
 		struct wlr_keyboard *keyboard = wlr_seat_get_keyboard(seat->wlr_seat);
 		if (keyboard) {
 			wlr_seat_keyboard_notify_enter(seat->wlr_seat,
diff -urN old/sway/server.c new/sway/server.c
--- old/sway/server.c	2018-05-24 00:33:57.668093267 -0000
+++ new/sway/server.c	2018-05-24 00:52:36.578113971 -0000
@@ -18,7 +18,9 @@
 #include <wlr/types/wlr_xdg_output.h>
 #include <wlr/util/log.h>
 // TODO WLR: make Xwayland optional
+#ifdef HAVE_XWAYLAND
 #include <wlr/xwayland.h>
+#endif
 #include "sway/config.h"
 #include "sway/input/input-manager.h"
 #include "sway/server.h"
@@ -72,12 +74,13 @@
 	server->xdg_shell_surface.notify = handle_xdg_shell_surface;
 
 	// TODO make xwayland optional
+#ifdef HAVE_XWAYLAND
 	server->xwayland =
 		wlr_xwayland_create(server->wl_display, server->compositor, true);
 	wl_signal_add(&server->xwayland->events.new_surface,
 		&server->xwayland_surface);
 	server->xwayland_surface.notify = handle_xwayland_surface;
-
+#endif
 	// TODO: configurable cursor theme and size
 	server->xcursor_manager = wlr_xcursor_manager_create(NULL, 24);
 	wlr_xcursor_manager_load(server->xcursor_manager, 1);
@@ -85,9 +88,11 @@
 		server->xcursor_manager, "left_ptr", 1);
 	if (xcursor != NULL) {
 		struct wlr_xcursor_image *image = xcursor->images[0];
+#ifdef HAVE_XWAYLAND
 		wlr_xwayland_set_cursor(server->xwayland, image->buffer,
 			image->width * 4, image->width, image->height, image->hotspot_x,
 			image->hotspot_y);
+#endif
 	}
 
 	// TODO: Integration with sway borders
diff -urN old/sway/tree/layout.c new/sway/tree/layout.c
--- old/sway/tree/layout.c	2018-05-24 00:33:57.668093267 -0000
+++ new/sway/tree/layout.c	2018-05-24 00:46:43.498107438 -0000
@@ -35,7 +35,9 @@
 
 	root_container.sway_root = calloc(1, sizeof(*root_container.sway_root));
 	root_container.sway_root->output_layout = wlr_output_layout_create();
+#ifdef HAVE_XWAYLAND
 	wl_list_init(&root_container.sway_root->xwayland_unmanaged);
+#endif
 	wl_signal_init(&root_container.sway_root->events.new_container);
 
 	root_container.sway_root->output_layout_change.notify =
diff -urN old/sway/tree/view.c new/sway/tree/view.c
--- old/sway/tree/view.c	2018-05-24 00:33:57.668093267 -0000
+++ new/sway/tree/view.c	2018-05-24 00:46:13.108106875 -0000
@@ -112,8 +112,10 @@
 		return "xdg_shell_v6";
 	case SWAY_VIEW_XDG_SHELL:
 		return "xdg_shell";
+#ifdef HAVE_XWAYLAND
 	case SWAY_VIEW_XWAYLAND:
 		return "xwayland";
+#endif
 	}
 	return "unknown";
 }
